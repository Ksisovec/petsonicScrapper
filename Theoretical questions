Блок Q1
1. C какими OС Вы работали? Работали ли с консолью? Какие консольные утилиты Linux Вы
знаете и использовали?

Приходилось работать с windows и Linux(mint, ubuntu, raspbian).
С консолью работал во всех из перечисленных выше ОС.
Что касательно утилит - некоторое время работал с vim.
2. Как Вы повышаете свою профессиональную квалификацию (названия книг, курсов,
сайтов, скринкастов и т.д.)?

В данный момент дочитываю философию джава и собираюсь начать clean code. Из сойтов наиболее часто использую такие как:
stackoverflow, habrahabr, javarush, codewars, sql-ex, javastudy, metanit, proselyte. Из скринкастов могу вспомнить
только последние просмотренные: Golovach Courses, alishev и TPMGTU. Это только те, что удалось вспомнить.

3. Какие сторонние библиотеки Вы используете чаще всего для разработки? Какие плюсы в
них Вы выделяете для себя? (Ruby или тот язык, на котором пишите)

Послдение 2,5 года я работал только над одним проектом. И он был на java. Поэтому сторонние библиотеки, что там
использовались были нацелены конкретно для данного проекта. Библиотеки для фильтрации звука, нормализации сигнала, оконных
преобразований и т.д. Поэтому касательно этого случая плюсом библиотек было то, что они решают поставленную задачу
лучше чем аналогичные существующие (например intel ipp).
Если не учитывать тот проект на работе - то использую Spring(Java). Это огромный набор фреймворков для разнообразных задач.
Из плюсов можно отметить: IoC(Inversion of Control) и DI(Dependency injection) приложении на основе Spring объекты
слабосвязаны. Не надо создавать объекты вручную. Настройки компонентов отделены от программного кода.

Блок Q2
1. Какие инструменты для профайлинга и дебага Вы используете? Какие у них минусы?
В рамках своих предыдущих работ использовал VS16 и intellij Idea
Данные ide представляют собой не только набор инструментов для профайлинга и дебага, а куда больше инструментов.
В виду этого они могут подтормаживать и требуют немалого количества ресурсов. Огромное множество настроек, большую
часть из которых нет необходимости менять. Но когда появляется - может потребоваться немало времени: чтобы разобраться.
Может что-нибудь поломаться и перестать работать после установки нового апдейта.

2. Объясните почему происходит следующее (в контексте языка Ruby):
a. 1660 / 100 ≠ 16.6
b. 24.0 * 0.1 ≠ 2.4

а. Делятся два целых числа - результат целое число. если бы хотя бы одно из них было вещественным - результат
тоже был бы вещественным числом
b. В данном случае типичная проблема дробных чисел, что существует не только в ruby. Существуют сложности с
преобразованием числа с плавающей точкой в двоичную СИ и обратно. Т.е. даже просто преобразуя число с плавающей
точкой из десятичной СИ в двоичную и обратно - можно получит уже немного другое число.

3. С какими СУБД вы работали? Проектировали ли вы свою собственную БД? Сколько было
в ней таблиц? С какой самой большой таблицей по количеству записей Вы работали?

Приходилось работать с MySQL и PostgreSQL.
Проектировал. В ней было около 30 таблиц с разнообразными видами связи (один к одному, один ко многим, многие ко многим)
Самая большая таблица состояли из 100 000 записей.

4. Оптимизировали ли Вы запросы в SQL? Как Вы это делали? Как Вы понимаете что запрос
выполняется оптимально?

Самому не приходилось этим занимается, но понимаю как это работает:
Для начала не выбирать все поля, а только те, что нужны.
Указать непроходимое количество строк в результате (через LIMIT). А не отбрасывать потом ненужные.
Если надо посчитать количество использовать COUNT, а не считать количество строк: что вернул запрос.
Использовать как можно меньше JOINов. Если без большого количества никак - вполне возможно будет лучше разбить
сложный запрос на несколько простых. 